{"version":3,"file":"474.js","mappings":"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","sources":["webpack://slack-clone/./pages/DirectMessage/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, DragOver, Header } from '@pages/DirectMessage/styles';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\nimport fetcher from '@utils/fetcher';\nimport gravatar from 'gravatar';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    revalidate,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const [socket] = useSocket(workspace);\n  const [dragOver, setDragOver] = useState(false);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, userData, workspace, id],\n  );\n\n  const onMessage = useCallback((data: IDM) => {\n    //id : other party's id\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n      mutateChat((chatData) => {\n        chatData?.[0].unshift(data);\n        return chatData;\n      }, false).then(() => {\n        if (scrollbarRef.current) {\n          if (\n            scrollbarRef.current.getScrollHeight() <\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n          ) {\n            console.log('scrollToBottom!', scrollbarRef.current.getValues());\n            setTimeout(() => {\n              scrollbarRef.current?.scrollToBottom();\n            }, 50);\n          }\n        }\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  //scroll down when loading\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  }, [workspace, id]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n        mutateChat();\n      });\n    },\n    [workspace, id, mutateChat],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["useParams","workspace","id","userData","useSWR","fetcher","data","myData","scrollbarRef","useRef","useInput","chat","onChangeChat","setChat","useSWRInfinite","index","chatData","mutateChat","mutate","revalidate","setSize","isReachingEnd","length","socket","useSocket","useState","dragOver","setDragOver","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","console","error","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","log","getValues","setTimeout","useEffect","on","off","localStorage","setItem","getTime","toString","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","onDragOver","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ref"],"sourceRoot":""}