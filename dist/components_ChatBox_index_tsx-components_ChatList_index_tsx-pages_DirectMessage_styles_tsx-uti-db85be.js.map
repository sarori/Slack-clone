{"version":3,"file":"components_ChatBox_index_tsx-components_ChatList_index_tsx-pages_DirectMessage_styles_tsx-uti-db85be.js","mappings":"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","sources":["webpack://slack-clone/./components/Chat/index.tsx","webpack://slack-clone/./components/Chat/styles.tsx","webpack://slack-clone/./components/ChatBox/index.tsx","webpack://slack-clone/./components/ChatBox/styles.tsx","webpack://slack-clone/./components/ChatList/index.tsx","webpack://slack-clone/./components/ChatList/styles.tsx","webpack://slack-clone/./pages/DirectMessage/styles.tsx","webpack://slack-clone/./utils/makeSection.ts"],"sourcesContent":["import { IDM, IChat, IUser } from '@typings/db';\nimport React, { VFC, memo, useMemo, FC } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst BACK_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3095' : 'https://sleact.nodebird.com';\nconst Chat: FC<Props> = memo(({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  const user: IUser = 'Sender' in data ? data.Sender : data.User;\n\n  const result = useMemo<(string | JSX.Element)[] | JSX.Element>(\n    () =>\n      data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') ? (\n        <img src={`${BACK_URL}/${data.content}`} style={{ maxHeight: 200 }} />\n      ) : (\n        regexifyString({\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n          decorator(match, index) {\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n            if (arr) {\n              return (\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                  @{arr[1]}\n                </Link>\n              );\n            }\n            return <br key={index} />;\n          },\n          input: data.content,\n        })\n      ),\n    [workspace, data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div\n        className=\"\n      chat-img\"\n      >\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n});\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n  &:hover {\n    background: #eee;\n  }\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n`;\n","import React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport { ChatArea, Form, MentionsTextarea, Toolbox, SendButton, EachMention } from '@components/ChatBox/styles';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport gravatar from 'gravatar';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport { useParams } from 'react-router';\nimport fetcher from '@utils/fetcher';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\n\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    revalidate,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000, // 2초\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n  const onKeydownChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyPress={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n          {/* <textarea value={chat} onChange={onChangeChat} onKeyDown={onKeydownChat} /> */}\n        </MentionsTextarea>\n\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n// import { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatZone, Section, StickyHeader } from './styles';\nimport React, { useCallback, forwardRef, RefObject, MutableRefObject } from 'react';\nimport { IChat, IDM } from '@typings/db';\nimport Chat from '@components/Chat';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          // 스크롤 위치 유지\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\n          if (current) {\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\n          }\n        });\n      }\n    },\n    [scrollRef, isReachingEnd, setSize],\n  );\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n});\n\nexport default ChatList;\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["React","memo","useMemo","ChatWrapper","gravatar","dayjs","regexifyString","Link","useParams","BACK_URL","process","env","NODE_ENV","Chat","data","workspace","user","Sender","User","result","content","startsWith","maxHeight","pattern","decorator","match","index","arr","input","url","email","s","d","nickname","createdAt","format","useCallback","useEffect","useRef","ChatArea","Form","MentionsTextarea","Toolbox","SendButton","EachMention","autosize","Mention","useSWR","fetcher","ChatBox","chat","onSubmitForm","onChangeChat","placeholder","dedupingInterval","userData","error","revalidate","mutate","memberData","textareaRef","current","onKeydownChat","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","focus","map","v","id","display","trim","MentionsInput","ChatZone","Section","StickyHeader","forwardRef","Scrollbars","ChatList","scrollRef","chatSections","setSize","isReachingEnd","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","Object","entries","date","chats","Container","Header","DragOver","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}