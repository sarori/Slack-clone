{"version":3,"file":"256.js","mappings":"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","sources":["webpack://slack-clone/./pages/Channel/styles.tsx","webpack://slack-clone/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  \n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, Header } from '@pages/DirectMessage/styles';\nimport { useParams } from 'react-router';\nimport useSWR, { useSWRInfinite } from 'swr';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport { DragOver } from './styles';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    revalidate,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .then(() => {\n            revalidate();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, chatData, myData, channelData, workspace, channel],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (\n        data.Channel.name === channel &&\n        (data.content.startsWith('uploads\\\\') || data.content.startsWith('uploads/') || data.UserId !== myData?.id)\n      ) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onChangeFile = useCallback((e) => {\n    const formData = new FormData();\n    if (e.target.files) {\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < e.target.files.length; i++) {\n        const file = e.target.files[i].getAsFile();\n        console.log('... file[' + i + '].name = ' + file.name);\n        formData.append('image', file);\n      }\n    }\n    axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {});\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n  }, [workspace, channel]);\n\n  const onDrop = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          console.log(e.dataTransfer.items[i]);\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            console.log(e, '.... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n        localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  // if (channelsData && !channelData) {\n  //   return <Redirect to={`/workspace/${workspace}/channel/일반`} />;\n  // }\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div style={{ display: 'flex', flex: 1, justifyContent: 'flex-end', alignItems: 'center' }}>\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["DragOver","useParams","workspace","channel","myData","useSWR","fetcher","data","useInput","chat","onChangeChat","setChat","channelData","useSWRInfinite","index","chatData","mutateChat","mutate","revalidate","setSize","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","useState","showInviteChannelModal","setShowInviteChannelModal","dragOver","setDragOver","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","name","startsWith","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","formData","FormData","target","files","i","file","getAsFile","append","localStorage","setItem","getTime","toString","onDrop","dataTransfer","items","kind","onDragOver","chatSections","makeSection","flat","reverse","style","display","flex","justifyContent","alignItems","onClick","className","type","ChatList","ref","ChatBox","InviteChannelModal","show"],"sourceRoot":""}