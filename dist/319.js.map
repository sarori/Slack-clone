{"version":3,"file":"319.js","mappings":"kqCA4HA,QAnHe,WACb,OAAoCA,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,GAAjDC,EAAR,EAAQA,KACR,GADA,EAAcC,MAAd,EAAqBC,WACrB,GAA+BC,EAAAA,EAAAA,GAAS,IAAxC,IAAOC,EAAP,KAAcC,EAAd,KACA,KAAqCF,EAAAA,EAAAA,GAAS,IAA9C,GAAOG,EAAP,KAAiBC,EAAjB,KACA,KAAgCC,EAAAA,EAAAA,UAAS,IAAzC,GAAOC,EAAP,KAAiBC,EAAjB,KACA,KAA0CF,EAAAA,EAAAA,UAAS,IAAnD,GAAOG,EAAP,KAAsBC,EAAtB,KACA,KAA0CJ,EAAAA,EAAAA,WAAS,GAAnD,GAAOK,EAAP,KAAsBC,EAAtB,KACA,KAAsCN,EAAAA,EAAAA,UAAS,IAA/C,GAAOO,EAAP,KAAoBC,EAApB,KACA,KAA0CR,EAAAA,EAAAA,WAAS,GAAnD,GAAOS,EAAP,KAAsBC,EAAtB,KACMC,GAAmBC,EAAAA,EAAAA,cACvB,SAACC,GACC,IACYC,EACRD,EADFE,OAAUD,MAEZZ,EAAYY,GACZR,EAAiBQ,IAAUX,KAE7B,CAACA,IAGGa,GAAwBJ,EAAAA,EAAAA,cAC5B,SAACC,GACC,IACYC,EACRD,EADFE,OAAUD,MAEZV,EAAiBU,GACjBR,EAAiBQ,IAAUb,KAE7B,CAACA,EAAUH,EAAUF,EAAOO,IAGxBc,GAAWL,EAAAA,EAAAA,cACf,SAACC,GACCA,EAAEK,kBACGb,GAAiBP,IACpBU,EAAe,IACfE,GAAiB,GACjBS,IAAAA,KACQ,aAAc,CAClBvB,MAAAA,EACAE,SAAAA,EACAG,SAAAA,IAEDmB,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZX,GAAiB,MAElBc,OAAM,SAAC/B,GACN6B,QAAQC,IAAI9B,EAAM4B,SAAS7B,MAC3BgB,EAAef,EAAM4B,SAAS7B,SAE/BiC,SAAQ,kBAGf,CAAC7B,EAAOE,EAAUG,EAAUE,EAAeE,IAE7C,YAAaqB,IAATlC,EACK,yCAELA,EACK,gBAAC,KAAD,CAAUmC,GAAG,iCAIpB,uBAAKC,GAAG,aACN,gBAAC,KAAD,eACA,gBAAC,KAAD,CAAMX,SAAUA,GACd,gBAAC,KAAD,CAAOW,GAAG,eACR,mCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,QAAQD,GAAG,QAAQE,KAAK,QAAQC,SAAUlC,EAAeiB,MAAOlB,MAIhF,gBAAC,KAAD,CAAOgC,GAAG,kBACR,mCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,OAAOD,GAAG,WAAWE,KAAK,WAAWC,SAAUhC,EAAkBe,MAAOhB,MAIxF,gBAAC,KAAD,CAAO8B,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAD,CAAOC,KAAK,WAAWD,GAAG,WAAWE,KAAK,WAAWC,SAAUpB,EAAkBG,MAAOb,MAI5F,gBAAC,KAAD,CAAO2B,GAAG,wBACR,uCACA,2BACE,gBAAC,KAAD,CACEC,KAAK,WACLD,GAAG,iBACHE,KAAK,iBACLC,SAAUf,EACVF,MAAOX,KAGVE,GAAiB,gBAAC,KAAD,oCAChBP,GAAY,gBAAC,KAAD,qBACbS,GAAe,gBAAC,KAAD,KAAQA,GACvBE,GAAiB,gBAAC,KAAD,4BAEpB,gBAAC,KAAD,CAAQoB,KAAK,UAAb,SAGF,gBAAC,KAAD,6BAEE,gBAAC,KAAD,CAAMF,GAAG,UAAT","sources":["webpack://slack-clone/./pages/SignUp/index.tsx"],"sourcesContent":["import useInput from '@hooks/useInput';\nimport React, { useCallback, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header, Label, Input, LinkContainer, Button, Form, Error, Success } from './styles';\nimport axios from 'axios';\nimport { Redirect } from 'react-router';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\n\nconst SignUp = () => {\n  const { data, error, revalidate } = useSWR('/api/users', fetcher);\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, setPassword] = useState('');\n  const [passwordCheck, setPasswordCheck] = useState('');\n  const [mismatchError, setMismatchError] = useState(false);\n  const [signUpError, setSignUpError] = useState('');\n  const [signUpSuccess, setSignUpSuccess] = useState(false);\n  const onChangePassword = useCallback(\n    (e) => {\n      const {\n        target: { value },\n      } = e;\n      setPassword(value);\n      setMismatchError(value !== passwordCheck);\n    },\n    [passwordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e) => {\n      const {\n        target: { value },\n      } = e;\n      setPasswordCheck(value);\n      setMismatchError(value !== password);\n    },\n    [password, nickname, email, passwordCheck],\n  );\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!mismatchError && nickname) {\n        setSignUpError('');\n        setSignUpSuccess(false);\n        axios\n          .post('/api/users', {\n            email,\n            nickname,\n            password,\n          })\n          .then((response) => {\n            console.log(response);\n            setSignUpSuccess(true);\n          })\n          .catch((error) => {\n            console.log(error.response.data);\n            setSignUpError(error.response.data);\n          })\n          .finally(() => {});\n      }\n    },\n    [email, nickname, password, passwordCheck, mismatchError],\n  );\n  if (data === undefined) {\n    return <div>Loading...</div>;\n  }\n  if (data) {\n    return <Redirect to=\"/workspace/sleact/channel/일반\" />;\n  }\n\n  return (\n    <div id=\"container\">\n      <Header>Sleact</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일</span>\n          <div>\n            <Input type=\"email\" id=\"email\" name=\"email\" onChange={onChangeEmail} value={email} />\n          </div>\n        </Label>\n\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <div>\n            <Input type=\"text\" id=\"nickname\" name=\"nickname\" onChange={onChangeNickname} value={nickname} />\n          </div>\n        </Label>\n\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input type=\"password\" id=\"password\" name=\"password\" onChange={onChangePassword} value={password} />\n          </div>\n        </Label>\n\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              type=\"password\"\n              id=\"password-check\"\n              name=\"password-check\"\n              onChange={onChangePasswordCheck}\n              value={passwordCheck}\n            />\n          </div>\n          {mismatchError && <Error>Check your password again.</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요.</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>회원가입되었습니다. 로그인해주세요</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n\n      <LinkContainer>\n        Do you have account?&nbsp;\n        <Link to=\"/login\">Login</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["useSWR","fetcher","data","error","revalidate","useInput","email","onChangeEmail","nickname","onChangeNickname","useState","password","setPassword","passwordCheck","setPasswordCheck","mismatchError","setMismatchError","signUpError","setSignUpError","signUpSuccess","setSignUpSuccess","onChangePassword","useCallback","e","value","target","onChangePasswordCheck","onSubmit","preventDefault","axios","then","response","console","log","catch","finally","undefined","to","id","type","name","onChange"],"sourceRoot":""}